//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.ServiceProduct {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProduct.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        DMODTO.ProductsDTO[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Threading.Tasks.Task<DMODTO.ProductsDTO[]> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsBySupplier", ReplyAction="http://tempuri.org/IProductService/GetProductsBySupplierResponse")]
        DMODTO.ProductsDTO[] GetProductsBySupplier(int SupplierID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsBySupplier", ReplyAction="http://tempuri.org/IProductService/GetProductsBySupplierResponse")]
        System.Threading.Tasks.Task<DMODTO.ProductsDTO[]> GetProductsBySupplierAsync(int SupplierID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetOneProduct", ReplyAction="http://tempuri.org/IProductService/GetOneProductResponse")]
        DMODTO.ProductsDTO GetOneProduct(int id, int suppid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetOneProduct", ReplyAction="http://tempuri.org/IProductService/GetOneProductResponse")]
        System.Threading.Tasks.Task<DMODTO.ProductsDTO> GetOneProductAsync(int id, int suppid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ProductUpdate", ReplyAction="http://tempuri.org/IProductService/ProductUpdateResponse")]
        bool ProductUpdate(DMODTO.ProductsDTO Pdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ProductUpdate", ReplyAction="http://tempuri.org/IProductService/ProductUpdateResponse")]
        System.Threading.Tasks.Task<bool> ProductUpdateAsync(DMODTO.ProductsDTO Pdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/Login", ReplyAction="http://tempuri.org/IProductService/LoginResponse")]
        DMODTO.UsersDTO Login(int id, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/Login", ReplyAction="http://tempuri.org/IProductService/LoginResponse")]
        System.Threading.Tasks.Task<DMODTO.UsersDTO> LoginAsync(int id, string pw);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : WebClient.ServiceProduct.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<WebClient.ServiceProduct.IProductService>, WebClient.ServiceProduct.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DMODTO.ProductsDTO[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<DMODTO.ProductsDTO[]> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public DMODTO.ProductsDTO[] GetProductsBySupplier(int SupplierID) {
            return base.Channel.GetProductsBySupplier(SupplierID);
        }
        
        public System.Threading.Tasks.Task<DMODTO.ProductsDTO[]> GetProductsBySupplierAsync(int SupplierID) {
            return base.Channel.GetProductsBySupplierAsync(SupplierID);
        }
        
        public DMODTO.ProductsDTO GetOneProduct(int id, int suppid) {
            return base.Channel.GetOneProduct(id, suppid);
        }
        
        public System.Threading.Tasks.Task<DMODTO.ProductsDTO> GetOneProductAsync(int id, int suppid) {
            return base.Channel.GetOneProductAsync(id, suppid);
        }
        
        public bool ProductUpdate(DMODTO.ProductsDTO Pdto) {
            return base.Channel.ProductUpdate(Pdto);
        }
        
        public System.Threading.Tasks.Task<bool> ProductUpdateAsync(DMODTO.ProductsDTO Pdto) {
            return base.Channel.ProductUpdateAsync(Pdto);
        }
        
        public DMODTO.UsersDTO Login(int id, string pw) {
            return base.Channel.Login(id, pw);
        }
        
        public System.Threading.Tasks.Task<DMODTO.UsersDTO> LoginAsync(int id, string pw) {
            return base.Channel.LoginAsync(id, pw);
        }
    }
}
